import axios from "axios";
import {BaseUrl} from "./BaseUrl.js";
import {Apis} from "./Apis.js";
import {isSuccess} from "./Auth/isSuccess.js";
import toast from "react-hot-toast";

export const LoginAction = async (data) => {
    try {
        const res = await axios.post(BaseUrl + Apis.auth + "/login", data)
        if (isSuccess(res.status)) {
            localStorage.setItem("access-token", res.data.token)
            localStorage.setItem("user_uuid", res.data.user.id)
            localStorage.setItem("path", "/")
            return toast.success("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëã", {duration: 4000})
        }
    } catch (err) {
        localStorage.setItem("path", '/auth/login')
        return toast.error("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π")
    }
}

export const AddNews = async (data) => {
    try {
        const res = await axios.post(BaseUrl + Apis.blogs, data)
        if (isSuccess(res.status)) {
            localStorage.setItem("newsId", res.data)
        }
    } catch (err) {
        return toast.error(err.message)
    }
}

export const GetNews = async () => {
    try {
        const res = await axios.get(BaseUrl + Apis.blogs)
        if (isSuccess(res.status)) {
            return res.data
        }
    } catch (err) {
        return toast.error(err.message)
    }
}

export const UploadPhoto = async (data) => {
    try {
        const res = await axios.post(BaseUrl + Apis.upload, data)
        if (isSuccess(res.status)) {
            localStorage.setItem("photoId", res.data)
        }
    } catch (err) {
        if (err.response.status === 400) {
            return toast.error(err.response.data.message)
        }
    }
}

export const GetData = async (path) => {
    try {
        const res = await axios.get(BaseUrl + Apis.auth + "/" + localStorage.getItem("user_uuid"))
        if (isSuccess(res.status)) {
            localStorage.setItem("path", path)
            return res.data
        }
    } catch (err) {
        localStorage.setItem("path", "/unauthorized")
    }
}

export const GetAllAdmin = async () => {
    try {
        const res = await axios.get(BaseUrl + Apis.auth)
        if (isSuccess(res.status)) {
            return res.data
        }
    } catch (err) {
        return toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    }
}

export const AddAdmin = async (data) => {
    try {
        const res = await axios.post(BaseUrl + Apis.auth + '/add-admin', data)
        if (isSuccess(res.status)) {
            return toast.success(res.data.message)
        }
    } catch (err) {
        if (err.response.status === 409) {
            return toast.error("—Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –∏–º–µ–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        }
    }
}

export const DeleteAdmin = async (id) => {
    try {
        const res = await axios.delete(BaseUrl + Apis.auth + "/" + id)
        if (isSuccess(res.status)) {
            return toast.success(res.data.message)
        }
    } catch (err) {
        return toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    }
}

export const DeleteNews = async (id) => {
    try {
        const res = await axios.delete(BaseUrl + Apis.blogs + "/" + id)
        if (isSuccess(res.status)) {
            setTimeout(() => {
                window.location.reload()
            }, 1000)
            return toast.success(res.data.message)
        }
    } catch (err) {
        return toast.error(err.message)
    }
}

export const GetOrders = async () => {
    try {
        const res = await axios.get(BaseUrl + Apis.order)
        if (isSuccess(res.status)) {
            return res.data
        }
    } catch (err) {
        return toast.error("–≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤ –æ—à–∏–±–∫–∞")
    }
}

export const GetRequest = async () => {
    try {
        const res = await axios.get(BaseUrl + Apis.request)
        if (isSuccess(res.status)){
            return res.data._embedded.list
        }
    }catch (err){
        return toast.error("–æ—à–∏–±–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤")
    }
}

export const Remove = async (id) => {
    try {
        const res = await axios.delete(BaseUrl + Apis.request + "/" + id)
        if (isSuccess(res.status)){
            setTimeout(() => {
                window.location.reload()
            }, 1000)
            return toast.success("–∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        }
    }catch (err){
        return toast.error("–Ω–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
    }
}

export const Edit = async (id, data) => {
    try {
        const res = await axios.put(BaseUrl + Apis.blogs + "/" + id, data)
        if (isSuccess(res.status)){
            return toast.success(res.data.message)
        }
    }catch (err){
        return toast.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    }
}